[{"D:\\Work\\Instapic-Frontend\\instapic\\src\\index.js":"1","D:\\Work\\Instapic-Frontend\\instapic\\src\\App.js":"2","D:\\Work\\Instapic-Frontend\\instapic\\src\\reportWebVitals.js":"3","D:\\Work\\Instapic-Frontend\\instapic\\src\\serviceWorker.js":"4","D:\\Work\\Instapic-Frontend\\instapic\\src\\Login\\index.js":"5","D:\\Work\\Instapic-Frontend\\instapic\\src\\Register\\index.js":"6","D:\\Work\\Instapic-Frontend\\instapic\\src\\Feed\\index.js":"7","D:\\Work\\Instapic-Frontend\\instapic\\src\\Constants\\links.js":"8","D:\\Work\\Instapic-Frontend\\instapic\\src\\Feed\\components\\NavBar.js":"9","D:\\Work\\Instapic-Frontend\\instapic\\src\\Feed\\components\\PostModal.js":"10"},{"size":503,"mtime":1588123985000,"results":"11","hashOfConfig":"12"},{"size":1510,"mtime":1614725052336,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":5086,"mtime":1588123985000,"results":"15","hashOfConfig":"12"},{"size":3843,"mtime":1588123985000,"results":"16","hashOfConfig":"12"},{"size":3566,"mtime":1588123985000,"results":"17","hashOfConfig":"12"},{"size":5703,"mtime":1588123985000,"results":"18","hashOfConfig":"12"},{"size":138,"mtime":1614722709463,"results":"19","hashOfConfig":"12"},{"size":1793,"mtime":1614722737526,"results":"20","hashOfConfig":"12"},{"size":4973,"mtime":1588123985000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"cjnlj4",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"D:\\Work\\Instapic-Frontend\\instapic\\src\\index.js",[],["45","46"],"D:\\Work\\Instapic-Frontend\\instapic\\src\\App.js",[],"D:\\Work\\Instapic-Frontend\\instapic\\src\\reportWebVitals.js",[],"D:\\Work\\Instapic-Frontend\\instapic\\src\\serviceWorker.js",[],"D:\\Work\\Instapic-Frontend\\instapic\\src\\Login\\index.js",[],"D:\\Work\\Instapic-Frontend\\instapic\\src\\Register\\index.js",[],"D:\\Work\\Instapic-Frontend\\instapic\\src\\Feed\\index.js",["47"],"import React, { Component } from \"react\";\nimport { Button, Card, CardBody, CardImg, CardSubtitle, FormInput } from \"shards-react\";\nimport { Redirect } from \"react-router-dom\";\nimport { SERVER_URL } from \"../Constants/links\";\nimport { Spinner } from \"react-bootstrap\"\n\n\nimport NavBar from \"./components/NavBar\";\nimport PostModal from \"./components/PostModal\";\n\nimport \"./index.css\";\n\n/**\n * The Feed page that shows all the uploaded pics\n * \n * Handles fetching posts from backend, including pagination\n * \n * TO DOs:\n * - fix loading state\n * - sort and filter features\n * - deleting posts\n * - like and comment features\n */\nexport default class Feed extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            \"posts\": [],\n            \"postModalOpen\": false,\n            \"errorMessage\": \"\",\n            \"loading\": true,\n            \"page\": 1,\n            \"pagesize\": 3,\n            \"errorLog\": \"\"\n        };\n    }\n\n    async componentDidMount(){\n        await this.fetchPosts();\n\n        this.setState({\n            loading: false,\n        })\n\n    }\n\n    handleError = (err) => {\n        console.log(\"err\", err)\n        this.setState({ \n            loading: false, \n            errorMessage: \"There was an error.  Refresh.\",\n            errorLog: err\n        });\n        this.props.history.push(\"/login\");\n    }\n\n    fetchPosts = async () => {\n        await this.setState({\n            loading: true\n        })\n\n        const auth = await localStorage.getItem(\"auth\") || undefined\n        if (!auth) {\n            this.props.setUserLogin(false);\n            this.props.history.push(\"/login\");\n        }\n\n        const response = await fetch(SERVER_URL + `post/?pagesize=${this.state.pagesize}&page=${this.state.page}`, {\n            method: \"GET\",\n            mode: \"cors\", // no-cors, *cors, same-origin\n            cache: \"no-cache\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": auth\n            }\n        })\n        .then((response)=>response.json())\n        .catch((err)=>this.handleError(err))\n        \n        if (!response || (response.status === \"fail\" && !response.data)){\n            this.props.setUserLogin(false);\n            this.props.history.push(\"/login\");\n        } else if ( response.message && !response.data){\n            this.setState({\n                errorMessage: response.message + \". Refresh.\"\n            });\n            this.props.history.push(\"/login\");\n        } else {\n            this.props.setUserLogin(true);\n            this.setState({\n                posts: response.data\n            });\n        }\n\n        await this.setState({\n            loading: false\n        })\n    }\n\n    addNewPost = async (post) => {\n        const posts = this.state.posts;\n        posts.unshift(post);\n        posts.pop();\n        await this.setState({\n            posts\n        })\n    }\n\n    togglePostModal = (bool) => {\n        this.setState({\n            postModalOpen: bool || !this.state.postModalOpen\n        })\n    }\n\n    previousPage = async () => {\n        await this.setState({\n            page: this.state.page-1\n        });\n        await this.fetchPosts();\n    }\n\n    nextPage = async () => {\n        await this.setState({\n            page: this.state.page+1\n        });\n        await this.fetchPosts();\n    }\n\n    mapPosts = () => {\n        return this.state.posts.map((post, id)=>(\n            <Post key={`post_${id}`} {...post}/>\n        ))\n    }\n\n    render(){\n        // if (this.state.loading) {\n        //     return <Spinner animation=\"border\" role=\"status\"/>\n        // }\n\n        if (!this.props.loggedIn) {\n            return <Redirect to=\"/login\"/>\n        }\n\n        return(\n            <div className=\"FeedContainer\">\n                <NavBar newPost={()=>this.togglePostModal(true)} history={this.props.history}/>\n                <PostModal \n                    open={this.state.postModalOpen} \n                    toggle={this.togglePostModal} \n                    upload={this.addNewPost}/>\n                {\n                    this.state.errorMessage.length > 0\n                        ? <Button outline theme=\"danger\" id=\"error-button\" disabled>Error: {this.state.errorMessage}</Button>\n                        : null\n                }\n                <div className=\"posts-container\">\n                    {\n                        this.state.loading\n                            ? <Spinner animation=\"border\" role=\"status\"/>\n                            : this.mapPosts()\n                    }\n                </div>\n                <div className=\"page-controls\">\n                    {\n                        this.state.page !== 1\n                            ? <Button pill onClick={this.previousPage}>Prev</Button>\n                            : <Button pill disabled>Prev</Button>\n                    }\n                    Page {this.state.page}\n                    {\n                        this.state.posts.length === this.state.pagesize\n                            ? <Button pill onClick={this.nextPage}>Next</Button>\n                            : <Button pill disabled>Next</Button>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Post extends Component {\n    render(){\n        const { description, image, username, posted_on } = this.props;\n        const date = new Date(posted_on)\n        return(\n            <Card>\n                <CardImg top src={`data:image/png;base64,${image}`} />\n                <CardBody>\n                    <CardSubtitle>{description}</CardSubtitle>\n                    <p>{username} on {date.toDateString()}</p>\n                </CardBody>\n            </Card>\n        )\n    }\n}","D:\\Work\\Instapic-Frontend\\instapic\\src\\Constants\\links.js",[],"D:\\Work\\Instapic-Frontend\\instapic\\src\\Feed\\components\\NavBar.js",[],"D:\\Work\\Instapic-Frontend\\instapic\\src\\Feed\\components\\PostModal.js",["48"],"import React, { Component } from \"react\";\nimport { Button, FormInput, Modal, ModalHeader } from \"shards-react\";\nimport Files from \"react-butterfiles\";\nimport { Spinner } from \"react-bootstrap\"\nimport { SERVER_URL } from \"../../Constants/links\";\n\nimport \"./PostModal.css\";\n\n/**\n * The Modal component for uploading new posts\n * \n * Handles file upload new post request\n * \n * TO DOs:\n * - improve image storage in backend and increase upload size\n * - compress images before sending to backend\n */\nexport default class PostModal extends Component {\n    state = {\n        pictures: [],\n        errors: [],\n        caption: \"\",\n        loading: false,\n    }\n\n    uploadImage = (pictures) => {\n        this.setState({\n            pictures,\n            errors: [] // reset errors when an image successfully uploads\n        })\n    }\n\n    removeImage = () => {\n        this.setState({\n            pictures: [],\n            errors: []\n        })\n    }\n\n    onChangeCaption = (e) => {\n        this.setState({\n            caption: e.target.value\n        })\n    }\n\n    postImage = async () => {\n        const auth = await localStorage.getItem(\"auth\") || undefined\n        if (!auth) {\n            this.setState({\n                errors: [ \"There is an error.  Please refresh \"]\n            })\n        }\n        \n        await this.setState({\n            loading: true\n        });\n\n        const response = await fetch(SERVER_URL + \"post/\", {\n            method: \"POST\",\n            mode: \"cors\", // no-cors, *cors, same-origin\n            cache: \"no-cache\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": auth\n            },\n            body: JSON.stringify({\n                image: this.state.pictures[0].src.base64.split(\",\")[1],\n                description: this.state.caption\n            })\n        })\n        .catch((error)=>console.log(\"error\", error))\n\n        // console.log(\"response\", response);\n\n        if (response.status === 200){\n            this.setState({ // clear state\n                pictures: [],\n                errors: [],\n                caption: \"\",\n                loading: false\n            });\n            const post = await response.json();\n            this.props.upload(post);\n            this.props.toggle(false);\n        } else {\n            this.setState({\n                errors: [ \"There was an error.  Try again later...\" ],\n                loading: false,\n            })\n        }\n    }\n\n    renderModalBody = () => (\n        <div id=\"modal-body\">\n            {\n                this.state.pictures.length > 0\n                    ? (\n                        <div id=\"preview-container\">\n                            <img id=\"preview\" src={this.state.pictures[0].src.base64}/>\n                            <Button outline pill theme=\"danger\" onClick={this.removeImage}>\n                                Remove\n                            </Button>\n                            <div id=\"description-container\">\n                                <p>Post caption:</p>\n                                <FormInput \n                                    placeholder=\"eg. 'What a beautiful sight!'\" \n                                    maxLength={200} \n                                    value={this.state.caption}\n                                    onChange={this.onChangeCaption}/>\n                            </div>\n                            <Button theme=\"info\" id=\"post-button\" onClick={this.postImage}>Post</Button>\n                        </div>\n                    )\n                    : (\n                        <Files\n                            maxSize=\"500kb\"\n                            convertToBase64\n                            accept={[\"image/png\",\"image/jpg\",\"image/jpeg\"]}\n                            onSuccess={this.uploadImage}\n                            onError={errors => this.setState({ errors: this.state.errors.concat(errors[0].type) })}\n                        >\n                            {({ browseFiles}) => (\n                                <div id=\"file-upload\">\n                                    <Button id=\"image-select\" outline pill onClick={browseFiles}>\n                                        Upload Image\n                                    </Button>\n                                </div>\n                            )}\n                        </Files>\n                    )\n            }\n            {\n                this.state.errors.map((error)=>(\n                    <p id=\"error\">{error}</p>\n                ))\n            }\n        </div>\n    )\n\n    render(){\n        return(\n            <Modal open={this.props.open} toggle={this.props.toggle} id=\"post-modal\">\n                <ModalHeader>New Post</ModalHeader>\n                {\n                    this.state.loading\n                        ? <Spinner animation=\"border\" role=\"status\"/>\n                        : this.renderModalBody()\n                }\n            </Modal>\n        )\n    }\n}\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":2,"column":57,"nodeType":"55","messageId":"56","endLine":2,"endColumn":66},{"ruleId":"57","severity":1,"message":"58","line":99,"column":29,"nodeType":"59","endLine":99,"endColumn":88},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'FormInput' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]